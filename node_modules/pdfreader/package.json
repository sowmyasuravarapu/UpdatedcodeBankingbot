{
  "_args": [
    [
      {
        "raw": "pdfreader",
        "scope": null,
        "escapedName": "pdfreader",
        "name": "pdfreader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\ssuravarapu\\Desktop\\rparobot"
    ]
  ],
  "_from": "pdfreader",
  "_hasShrinkwrap": false,
  "_id": "pdfreader@1.0.4",
  "_location": "/pdfreader",
  "_nodeVersion": "10.14.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pdfreader_1.0.4_1558632639165_0.45336939253382535"
  },
  "_npmUser": {
    "name": "adrienjoly",
    "email": "adrien.joly@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "pdfreader",
    "scope": null,
    "escapedName": "pdfreader",
    "name": "pdfreader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pdfreader/-/pdfreader-1.0.4.tgz",
  "_shasum": "ef469403e92ee45e32d8b776649bf0451bfc0ad5",
  "_shrinkwrap": null,
  "_spec": "pdfreader",
  "_where": "C:\\Users\\ssuravarapu\\Desktop\\rparobot",
  "author": {
    "name": "Adrien Joly"
  },
  "bugs": {
    "url": "https://github.com/adrienjoly/npm-pdfreader/issues"
  },
  "dependencies": {
    "pdf2json": "^1.1.8"
  },
  "description": "Read text and parse tables from PDF files. Supports tabular data with automatic column detection, and rule-based parsing.",
  "devDependencies": {
    "@semantic-release/changelog": "^3.0.2",
    "@semantic-release/git": "^7.0.8",
    "eslint-config-prettier": "^3.3.0",
    "eslint-plugin-prettier": "^3.0.0",
    "prettier": "1.15.3",
    "semantic-release": "^15.13.12"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-A/cdflRdRZ+YzmMvKVNF9Q89WJ1Og1w+95p3Dmmp56x/s9VnE+Z0lw7/8VSFU8PU7GfXT+K69+/gjwDkcdU+fg==",
    "shasum": "ef469403e92ee45e32d8b776649bf0451bfc0ad5",
    "tarball": "https://registry.npmjs.org/pdfreader/-/pdfreader-1.0.4.tgz",
    "fileCount": 28,
    "unpackedSize": 1431919,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc5tjACRA9TVsSAnZWagAAjqAQAIgyB09n9xOYvr66PeJj\nBgXG5WiYgglKgcZqBc4SB0lQ5Z8hfbbf7/RnOLlfsojYDdnjzOB7xPQeQeCH\nuA6R/zTdzEj88/h0gsD5dHylspRvWamdo5mi+rsUSKNStqB70QVvW7VaLbbf\neN/XeBtg2y8QxgdoFciO5cI9L3xsT77k1PYLVLQXjKUD81HC/6VGwprazAtf\n8Oczi/zrXbJVXVpVwQHhk230vV74mJNxFYwI6w+FDdwYdyBGDQ64vlk0hLHq\nJ5TFT6ihzZB8R32FQjVf1BXUx2x/mr42vxbzw2Asr+cBl68ANyW2M3VZjq/6\nbCByXbK9NhCdVUN5H0GVbrJHfz8B4LOyfqMbOiFRkBzsOP31tE8acGIPEUoP\n584FXDpkX7E6vKZW6iIw2qFrZu5hia3gOcDJvWUJ8VX52Vg/13jLElIKjtX2\nR7B55f38u5eZO7gd+SPEywMr7HMb92YFVIpARhpWvHs5PPjfp+BShSfJlLcA\nR/dIV8Fj4+r6gdT+nHQ3buJCo5JHvP9RxWIc+avcmcHykZ6mEP7PTe8izpBj\nZHPn0kEX0Dj4hHzHEUTZUDanayzrk7VIXk0TB/7I6WP691msq/tCru4mzA0K\nFusdA1tnsauzjfakU7L8wMCRndUc55LWX2LnrOurC46yiYgJbqKz9EY+lPLf\nDYlM\r\n=Uc5Y\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "926ea47db53ac78b7b915151f627cd250d27a8c7",
  "homepage": "https://github.com/adrienjoly/npm-pdfreader",
  "keywords": [
    "pdf",
    "reader",
    "parser",
    "parse",
    "parsing",
    "convert",
    "CLI",
    "table",
    "data",
    "csv",
    "json",
    "rules"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adrienjoly",
      "email": "adrien.joly@gmail.com"
    }
  ],
  "name": "pdfreader",
  "optionalDependencies": {},
  "readme": "# pdfreader [![Continuous Integration](https://circleci.com/gh/adrienjoly/npm-pdfreader.svg?style=shield)](https://circleci.com/gh/adrienjoly/npm-pdfreader) [![Code Quality](https://api.codacy.com/project/badge/Grade/73d37dbb0ff84795acf65a55c5936d83)](https://www.codacy.com/app/adrien-joly/npm-pdfreader?utm_source=github.com&utm_medium=referral&utm_content=adrienjoly/npm-pdfreader&utm_campaign=Badge_Grade)\n\nRead text and parse tables from PDF files.\n\nSupports **tabular data** with automatic column detection, and **rule-based parsing**.\n\nDependencies: it is based on [pdf2json](https://www.npmjs.com/package/pdf2json), which itself relies on Mozilla's [pdf.js](https://github.com/mozilla/pdf.js/).\n\nℹ️ This module is meant to be run using Node.js only. **It does not work from a web browser.**\n\nSummary:\n\n- [Installation, tests and CLI usage](#installation-tests-and-cli-usage)\n- [Raw PDF reading](#raw-pdf-reading) (incl. examples)\n- [Rule-based data extraction](#rule-based-data-extraction)\n- [Troubleshooting & FAQ](#troubleshooting--faq)\n\n## Installation, tests and CLI usage\n\n    npm install pdfreader\n    cd node_modules/pdfreader\n    npm test\n    node parse.js test/sample.pdf\n\n## Raw PDF reading\n\nThis module exposes the `PdfReader` class, to be instantiated.\n\nYour instance has two methods for parsing a PDF. They return the same output and differ only in input: `PdfReader.parseFileItems` (as below) for a filename, and `PdfReader.parseBuffer` (see: \"Raw PDF reading from a PDF already in memory (buffer)\") from data that you don't want to reference from the filesystem.\n\nWhichever method you choose, it asks for a callback, which gets called each time the instance finds what it denotes as a PDF item.\n\nAn item object can match one of the following objects:\n\n- `null`, when the parsing is over, or an error occured.\n- File metadata, `{file:{path:string}}`, when a PDF file is being opened, and is always the first item.\n- Page metadata, `{page:integer, width:float, height:float}`, when a new page is being parsed, provides the page number, starting at 1. This basically acts as a carriage return for the coordinates of text items to be processed.\n- Text items, `{text:string, x:float, y:float, w:float, h:float...}`, which you can think of as simple objects with a text property, and floating 2D AABB coordinates on the page.\n\nIt's up to your callback to process these items into a data structure of your choice, and also to handle any errors thrown to it.\n\nFor example:\n\n```javascript\nnew PdfReader().parseFileItems(\"sample.pdf\", function(err, item) {\n  if (err) callback(err);\n  else if (!item) callback();\n  else if (item.text) console.log(item.text);\n});\n```\n\n### Raw PDF reading from a PDF already in memory (buffer)\n\nAs above, but reading from a buffer in memory rather than from a file referenced by path. For example:\n\n```javascript\nvar fs = require(\"fs\");\nfs.readFile(\"sample.pdf\", (err, pdfBuffer) => {\n  // pdfBuffer contains the file content\n  new PdfReader().parseBuffer(pdfBuffer, function(err, item) {\n    if (err) callback(err);\n    else if (!item) callback();\n    else if (item.text) console.log(item.text);\n  });\n});\n```\n\n### Example: parsing lines of text from a PDF file\n\n![example cv resume parse convert pdf to text](https://github.com/adrienjoly/npm-pdfreader-example/raw/master/parseRows.png)\n\nHere is the code required to convert this PDF file into text:\n\n```js\nvar pdfreader = require(\"pdfreader\");\n\nvar rows = {}; // indexed by y-position\n\nfunction printRows() {\n  Object.keys(rows) // => array of y-positions (type: float)\n    .sort((y1, y2) => parseFloat(y1) - parseFloat(y2)) // sort float positions\n    .forEach(y => console.log((rows[y] || []).join(\"\")));\n}\n\nnew pdfreader.PdfReader().parseFileItems(\"CV_ErhanYasar.pdf\", function(\n  err,\n  item\n) {\n  if (!item || item.page) {\n    // end of file, or page\n    printRows();\n    console.log(\"PAGE:\", item.page);\n    rows = {}; // clear rows for next page\n  } else if (item.text) {\n    // accumulate text items into rows object, per line\n    (rows[item.y] = rows[item.y] || []).push(item.text);\n  }\n});\n```\n\nFork this example from [parsing a CV/résumé](https://github.com/adrienjoly/npm-pdfreader-example).\n\n### Example: parsing a table from a PDF file\n\n![example cv resume parse convert pdf table to text](https://github.com/adrienjoly/npm-pdfreader-example/raw/master/parseTable.png)\n\nHere is the code required to convert this PDF file into a textual table:\n\n```js\nvar pdfreader = require(\"pdfreader\");\n\nconst nbCols = 2;\nconst cellPadding = 40; // each cell is padded to fit 40 characters\nconst columnQuantitizer = item => parseFloat(item.x) >= 20;\n\nconst padColumns = (array, nb) =>\n  Array.apply(null, { length: nb }).map((val, i) => array[i] || []);\n// .. because map() skips undefined elements\n\nconst mergeCells = cells =>\n  (cells || [])\n    .map(cell => cell.text)\n    .join(\"\") // merge cells\n    .substr(0, cellPadding)\n    .padEnd(cellPadding, \" \"); // padding\n\nconst renderMatrix = matrix =>\n  (matrix || [])\n    .map((row, y) =>\n      padColumns(row, nbCols)\n        .map(mergeCells)\n        .join(\" | \")\n    )\n    .join(\"\\n\");\n\nvar table = new pdfreader.TableParser();\n\nnew pdfreader.PdfReader().parseFileItems(filename, function(err, item) {\n  if (!item || item.page) {\n    // end of file, or page\n    console.log(renderMatrix(table.getMatrix()));\n    console.log(\"PAGE:\", item.page);\n    table = new pdfreader.TableParser(); // new/clear table for next page\n  } else if (item.text) {\n    // accumulate text items into rows object, per line\n    table.processItem(item, columnQuantitizer(item));\n  }\n});\n```\n\nFork this example from [parsing a CV/résumé](https://github.com/adrienjoly/npm-pdfreader-example).\n\n## Rule-based data extraction\n\nThe Rule class can be used to define and process data extraction rules, while parsing a PDF document.\n\nRule instances expose \"accumulators\": methods that defines the data extraction strategy to be used for each rule.\n\nExample:\n\n```javascript\nvar processItem = Rule.makeItemProcessor([\n  Rule.on(/^Hello \\\"(.*)\\\"$/)\n    .extractRegexpValues()\n    .then(displayValue),\n  Rule.on(/^Value\\:/)\n    .parseNextItemValue()\n    .then(displayValue),\n  Rule.on(/^c1$/)\n    .parseTable(3)\n    .then(displayTable),\n  Rule.on(/^Values\\:/)\n    .accumulateAfterHeading()\n    .then(displayValue)\n]);\nnew PdfReader().parseFileItems(\"sample.pdf\", function(err, item) {\n  processItem(item);\n});\n```\n\n## Troubleshooting & FAQ\n\n### Is it possible to parse a PDF document from a web application?\n\nSolutions exist, but this module cannot be run directly by a web browser. If you really want to use this module, you will have to integrate it into your back-end so that PDF files can be read from your server.\n\n### `Cannot read property 'userAgent' of undefined` error from an express-based node.js app\n\nDmitry found out that you may need to run these instructions before including the `pdfreader` module:\n\n```js\nglobal.navigator = {\n  userAgent: \"node\"\n};\n\nwindow.navigator = {\n  userAgent: \"node\"\n};\n```\n\nSource: [express - TypeError: Cannot read property 'userAgent' of undefined error on node.js app run - Stack Overflow](https://stackoverflow.com/questions/49208414/typeerror-cannot-read-property-useragent-of-undefined-error-on-node-js-app-ru)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adrienjoly/npm-pdfreader.git"
  },
  "scripts": {
    "prettier:check": "npm run -s prettier:print 1>&2; exit $(npm run -s prettier:print | wc -l)",
    "prettier:fix": "prettier \"./**/*.js\" \"./**/*.md\" --write",
    "prettier:print": "prettier --list-different \"./**/*.js\" \"./**/*.md\"",
    "test": "npm run -s prettier:check && npm run -s test:functional && npm run -s test:print:result",
    "test:diff": "npm run -s test:diff:file && npm run -s test:diff:buffer",
    "test:diff:buffer": "node parseAsBuffer.js test/sample.pdf >test/test-buffer-snapshot.log; git --no-pager diff test/test-buffer-snapshot.log 1>&2; exit $(git --no-pager diff test/test-buffer-snapshot.log | wc -l)",
    "test:diff:file": "node test/test.js >test/test-snapshot.log; git --no-pager diff test/test-snapshot.log 1>&2; exit $(git --no-pager diff test/test-snapshot.log | wc -l)",
    "test:functional": "npm run -s test:sample && npm run -s test:regression && npm run -s test:diff",
    "test:print:result": "echo ✅  All tests passed.",
    "test:regression": "exit $(node parseAsBuffer.js test/issue-14-uncaught-error.pdf | grep --count Error)",
    "test:sample": "node test/test.js && node parseAsBuffer.js test/sample.pdf"
  },
  "version": "1.0.4"
}
